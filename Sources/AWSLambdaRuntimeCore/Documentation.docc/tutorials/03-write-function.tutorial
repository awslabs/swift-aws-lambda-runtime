@Tutorial(time: 15) {
    @Intro(title: "Write your first Lambda function") {
        Learn how to create your project, add dependencies, and create and test your first Lambda function in Swift.        
    }
    
    @Section(title: "Initialize a new project") {
        @ContentAndMedia() {
            Create a new swift project and open Xcode.
            @Image(source: "03-01-terminal-package-init", alt: "A Terminal with package init command")
        }
        
        @Steps {

            Start in your development folder.

            @Step {
                Open a Terminal and create a directory for your Lambda function.
                @Code(name: "Commands to type in the Terminal", file: 03-01-01-package-init.sh)
            }
            
            @Step {
                Initialize a new Swift package for an executable target.
                @Code(name: "Commands to type in the Terminal", file: 03-01-02-package-init.sh)
            }

            @Step {
                Open Xcode in this newly created directory.
                @Code(name: "Commands to type in the Terminal", file: 03-01-03-package-init.sh)
            }

            @Step {
                Alternatively, if you use VSCode, use the `code` command to open VSCode in your project repository.
                @Code(name: "Commands to type in the Terminal", file: 03-01-04-package-init.sh)
            }

            @Step {
                In your development environment, expand the project if necessary and open the file `Package.swift`.

                If you are an iOS developer, you might wonder what is a `Package.swift`. In simple terms, your `Package.swift` defines the dependencies your code has and what products (libraries and/or executables) your code offers.
                @Image(source: 03-01-xcode.png, alt: "project open in Xcode")
            }
        }
    }

    @Section(title: "Add the project dependencies") {
        @ContentAndMedia() {
            Prepare `Package.swift` to define the project targets and dependencies.
            @Image(source: "03-02-swift-package-manager.png", alt: "Swift Package Manager icon as a box")
        }        
        @Steps {
            @Step {
                In the Xcode editor, replace the content of `Package.swift` with the file on the right side of the screen.

                It defines a package for a project named `SquareNumberLambda`. The package name only matters when you build a library that is used by other Swift packages.
                
                > Comments are important here, do not skip them. They define the minimum version of Swift to use.
                @Code(name: "Package.swift", file: 03-02-01-package.swift)
            }
            @Step {
                Add the `platform` section.

                It defines on which Apple platforms the code can be executed. Since Lambda functions are supposed to be run on Linux servers with Amazon Linux 2, it is reasonable to make them run only on macOS, for debugging for example. It does not make sense to run this code on iOS, iPadOS, tvOS, and watchOS.
                @Code(name: "Package.swift", file: 03-02-02-package.swift)
            }
            @Step {
                Add the `dependencies` section.

                It defines what external libraries your code depends on. To run code within AWS Lambda you'll need a runtime that handles the communication with the [Lambda Runtime Interface](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html). This is what the `AWSLambdaRuntime` is for. You import it by specifying its GitHub url: `https://github.com/swift-server/swift-aws-lambda-runtime.git`.

                @Code(name: "Package.swift", file: 03-02-03-package.swift)
            }
            @Step {
                Add the `target` section.

                In the `targets` section you specify your own targets. They are pretty comparable to targets you specify within an Xcode project (that's probably why they share the name ðŸ˜Ž). In our example we only want to create an executable that is called `SquareNumberLambda`. An executable must have an entrypoint. This can be either a `main.swift` or an object that is marked with `@main`. For Lambda we will use the `@main` approach. 

                @Code(name: "Package.swift", file: 03-02-04-package.swift)
            }
            @Step {
                Add the `product` section.

                To advertise our `executableTarget` as a product of our package, we add it to the `products` section.
                @Code(name: "Package.swift", file: 03-02-05-package.swift)
            }

        }
    }

    @Section(title: "Write the function code") {
        @ContentAndMedia() {
            Now that our project structure is ready, let's write the code of your Lambda function. Perform the following steps in Xcode or another IDE of your choice.

            @Image(source: 03-03-swift-code-xcode, alt: "Swift code in Xcode")
        }
        
        @Steps {
            @Step {
                Rename the file `main.swift` to something else. I typically use `Lambda.swift`.
                
                The `AWSLambdaRuntime` use the [`@main`](https://github.com/apple/swift-evolution/blob/main/proposals/0281-main-attribute.md) directive to designate the entry point in your code.
                
                >A `main.swift` file is always considered to be an entry point, even if it has no top-level code. Because of this, placing the @main-designated type in a `main.swift` file is an error. 
                                
                @Image(source: 03-03-01-rename-file, alt: "Rename the file in Xcode IDE")
            }

            
            @Step {
                Remove the code generated and create a `@main struct` that implements the protocol `SimpleLambdaHandler`
                
                @Code(name: "Lambda.swift", file: 03-03-01-main.swift)
            }
                        
            @Step {
                Add an import statement to import the `AWSLambdaRuntime` library. 
                @Code(name: "Lambda.swift", file: 03-03-02-main.swift)
            }
            
            @Step {
                Write the `handle(_:context:) async throws -> Output` function as defined in `SimpleLambdaHandler` protocol.
                
                The `handle(_:context:)` function is the entry point of the Lambda function.  
                @Code(name: "Lambda.swift", file: 03-03-03-main.swift)
            }

            @Step {
                Add the definition of the input and output parameters.
                
                Input and Output parameters must conform to the `Codable` protocol. This ensures that your Lambda function accepts a JSON input and creates a JSON output.
                Your function can use any `Codable`. When your function is triggered by another AWS service, we modeled most of the input and output data format for you. You can add the dependency on https://github.com/swift-server/swift-aws-lambda-events and import `AWSLambdaEvents` in your code.
                
                @Code(name: "Lambda.swift", file: 03-03-04-main.swift)
            }
            
            @Step {
                Modify the `struct` and the `handle(_:context:)` function to use your input and output parameter types.
                
                @Code(name: "Lambda.swift", file: 03-03-05-main.swift)
            }

            @Step {
                Add your function-specific business logic.
                
                As mentioned earlier, this example is very simple, it just squares the number received as input. Your actual function can do whatever you want: call APIs, access a database, or any other task your business requires. 
                
                @Code(name: "Lambda.swift", file: 03-03-06-main.swift)
            }
            
        }
    }

    @Section(title: "Test Your Code Locally") {
        @ContentAndMedia() {
            Before to deploy your Lambda to AWS, you want to ensure that it works on your local machine.
            
            The `AWSLambdaRuntime` embeds a simple web server you can start and use to send your requests to your Lambda function.
            
            @Image(source: 03-04-test-locally.png, alt: "Icons of succeeded and failed tests")
        }
        
        @Steps {
            
            The embedded web server starts only when an environment variable is defined. You will edit the Run step of the target scheme to include the environment variable. This will allow you to run your code from Xcode.
            
            @Step {
                Select `Edit Scheme` under `SquareNumberLambda` target. 
                
                @Image(source: 03-04-01-edit-scheme.png, alt: "Menu entry to edit schemes")
            }
            
            @Step {
                Add the `LOCAL_LAMBDA_SERVER_ENABLED` environment variable, with a value of `true` under `Run` settings.
                
                @Image(source: 03-04-02-add-variable.png, alt: "Add environment variable under Run settings")
            }
            
            @Step {
                Compile and Run your project. You should see the following output in the console.
                
                @Code(name: "Console output", file: 03-04-03-console-output.sh)
            }
            
            @Step {
                Now that the local server started, open a Terminal and use `curl` or any other HTTP client to POST your input payload to `localhost:7000`.
                
                @Code(name: "curl command in a terminal", file: 03-04-04-curl.sh)
            }
            
            @Step {
                When you pass `{"number":3}`, you should receive the response `{"result":9}`
                
                > Do not forget to stop the running scheme when you're done.
                @Code(name: "curl command in a terminal", file: 03-04-05-curl.sh)
            }
                                    
            Alternatively, you can use the command line from the Terminal.

            @Step {
                From a Terminal, set the `LOCAL_LAMBDA_SERVER_ENABLED` environment variable to `true`
                @Code(name: "curl command in a terminal", file: 03-04-06-terminal.sh)
            }

            @Step {
                Use the command `swift run` to start the local embedded web server.
                @Code(name: "curl command in a terminal", file: 03-04-07-terminal.sh)
            }
            
            @Step {
                You should see the following output in the console. 
                @Code(name: "curl command in a terminal", file: 03-04-08-terminal.sh)
            }
            
            @Step {
                Now that the local server started, open a second tab in the Terminal and use `curl` or any other HTTP client to POST your input payload to `localhost:7000`.
                
                > Do not forget to stop the local server with `CTRL-C` when you're done.
                @Code(name: "curl command in a terminal", file: 03-04-04-curl.sh)
            }
            
        }        
    }

}
